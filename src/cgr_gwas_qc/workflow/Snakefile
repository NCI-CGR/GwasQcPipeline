from cgr_gwas_qc import load_config

cfg = load_config()


################################################################################
# All Targets
################################################################################
rule all:
    input:
        "GwasQcPipeline.complete",


################################################################################
# Import All Sub-workflows
################################################################################
targets = []


module entry_points:
    snakefile:
        cfg.subworkflow("entry_points")
    config:
        config


use rule * from entry_points


targets.extend(entry_points.targets)


module sample_qc:
    snakefile:
        cfg.subworkflow("sample_qc")
    config:
        config


use rule * from sample_qc


targets.extend(sample_qc.targets)


if sample_qc.use_contamination:

    module contamination:
        snakefile:
            cfg.subworkflow("contamination")
        config:
            config

    use rule * from contamination


    targets.extend(contamination.targets)


module subject_qc:
    snakefile:
        cfg.subworkflow("subject_qc")
    config:
        config


use rule * from subject_qc


targets.extend(subject_qc.targets)


module delivery:
    snakefile:
        cfg.subworkflow("delivery")
    config:
        config


use rule * from delivery


targets.extend(delivery.targets)


################################################################################
# Aggregate Sub-workflow Results
################################################################################
rule agg_subworkflow_results:
    input:
        targets,
    output:
        touch("GwasQcPipeline.complete"),
